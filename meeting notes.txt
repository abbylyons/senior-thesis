-----Nov. 13-----
Ming

See the last 3 pages of your notebook.


-----Nov. 12-----
Margo

Meeting with Ming tomorrow--make sure to stop him if you don't understand something
Ask for specific things written down, otherwise Ming will just talk at me :p

I should start playing around with stuff (anything that I've looked at in papers will do). Just write one test manually.
Start cranking out prose on the introduction.
Read 3 more papers.


-----Nov. 3------
Margo

Given a hardware description, we generate a suite of tests that, when executed on target platform, hardware descriptions accurately reflect what platform is supposed to do

Ask Ming for arithmatics for Cassiopeia
If David is in, collection of files for assembler. Does not need semantic testing. I want to focus on semantics.
Parser reads in language and generates tests. Should be decomposable to allow different languages.
But let's prototype first

This week:
Writing
- What does the reader know about the area? Bulleted list
- Fantastical thinking paragraph (goal setting; last paragraph of intro)
Reading
- Three papers (did one last week)
Tinkering
- Pick a language to tinker with
- Goal: generate a test or two

263-related: Zero-knowledge proofs


-----Oct. 27------
Margo

Three prongs:
Reading
Classify the machine description languages, each class will have a general approach to generating tests
Taking notes—three-sentence summary, a couple of intellectual reactions, how valuable/relevant the paper is and why. Maybe also note style. Does reader need to know the content as background for my thesis?
Writing
Related work, outline and structure of remaining portions
Introduction
Write an abstract with once upon a time. Ending of Moore’s law = other ways to leverage performance
Porting is labor-intensive. Used to just be x86, but now we have specialized hardware and languages—ARM, risk processors, special-purpose: FPGAs, GPUs
Hourglass shape of processors over time
How to port: code synthesis; machine-level and semantic descriptions. Imperative machine descriptions need to accurately reflect the machine
Tinkering
Don’t have to use Cass, can use any language used in a paper
Arithmatics
Write a few manual tests
How do I automate it?

This week:
Write an abstract
Two papers


-----Meeting 2------
Ming

Read stuff from David
Vale (project Everest from MSR); it’s executable, Java-like. Talk to Anitha (Steve’s grad student)
How do you test the real machine without modifying its state?
We’re testing one instruction at a time for now, but instructions can interfere with each other by messing up the registers, etc.
We need to get a machine description and an emulator
ssh grizzly.seas.harvard.edu


-----Meeting 1------
Margo

How to write a thesis document
This semester: introduction (can write once understand scope), related work (write this first), work plan (will evolve into a research approach)
Well-written related work should show glaring spot where my research goes
How do we verify that a machine description written by a human correctly describes an actual hardware artifact?
Related work: how to generate tests, what do machine descriptions look like?
Look for machine descriptions—low-level implementation mapping to semantics
Take notes on all papers you read!!
We only need a subset of cassiopeia


-----Meeting 0-----
Margo

Thesis notes
synthesize OS given machine description
machine-dependent parts
low-level stuff, programming languages stuff, program verification
but what’s a reasonable project?
Read the papers! But maybe skip the really long PL papers, and then give feedback to Margo over time (maybe one paper a week)
minimal support to build an operating system?
don’t need to worry about paperwork much
Application process...
GPA doesn’t matter much, good recommendations and personal statement matter more
Can take a grad course and start the project earlier to have research done by the application due date
Doesn’t matter when you apply, it matters a lot more whether you’re excited about grad school
